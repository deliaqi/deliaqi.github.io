<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>懒人做法实践之路</title>
    <url>/2020/03/17/easyfood/</url>
    <content><![CDATA[<p>(〃’▽’〃) 好吃好玩又好做的食物</p>
<ol>
<li>微甜甜品</li>
<li>各种饭饭</li>
<li>好多肉啊</li>
<li>花式素菜</li>
</ol>
<a id="more"></a>
<h1 id="微甜甜品"><a href="#微甜甜品" class="headerlink" title="微甜甜品"></a>微甜甜品</h1><h2 id="牛奶椰蓉小方"><a href="#牛奶椰蓉小方" class="headerlink" title="牛奶椰蓉小方"></a>牛奶椰蓉小方</h2><p><img src="/images/life/%E6%A4%B0%E8%93%89%E5%B0%8F%E6%96%B9.jpg" alt="Op5XehMqQCuGxmCTNr+eLg_thumb_60b3"></p>
<p>[<a href="https://www.zhihu.com/question/34583573/answer/764259693]" target="_blank" rel="noopener">https://www.zhihu.com/question/34583573/answer/764259693]</a>(有哪些不用烤箱就能自制的甜品？ - 琪小姐的回答 - 知乎)</p>
<p>糖的分量减半啦，玉米淀粉用普通淀粉代替了。</p>
<h2 id="香芋派"><a href="#香芋派" class="headerlink" title="香芋派"></a>香芋派</h2><p><img src="/images/life/%E9%A6%99%E8%8A%8B%E6%B4%BE1.jpg" alt="Wzbgr5cBQGSnz1W8zxD18Q_thumb_60aa"></p>
<p><img src="/images/life/%E9%A6%99%E8%8A%8B%E6%B4%BE2.jpg" alt="BwUYA1tJRLSNtMjCpmR8%Q_thumb_60a9"></p>
<p>[<a href="https://www.zhihu.com/question/34583573/answer/790679319]" target="_blank" rel="noopener">https://www.zhihu.com/question/34583573/answer/790679319]</a>(有哪些不用烤箱就能自制的甜品？ - 君君辅食记的回答 - 知乎)</p>
<p>有点丑嗷，但是味道真的不错=。= </p>
<p>同样的糖减半了，白砂糖用蜂蜜代替的。</p>
<h1 id="各种饭饭"><a href="#各种饭饭" class="headerlink" title="各种饭饭"></a>各种饭饭</h1><h2 id="排骨焖饭"><a href="#排骨焖饭" class="headerlink" title="排骨焖饭"></a>排骨焖饭</h2><p><img src="/images/life/%E6%8E%92%E9%AA%A8%E7%84%96%E9%A5%AD1.jpg" alt="UNADJUSTEDNONRAW_thumb_60c3"></p>
<p><img src="/images/life/%E6%8E%92%E9%AA%A8%E7%84%96%E9%A5%AD2.jpg" alt="UNADJUSTEDNONRAW_thumb_60c4"></p>
<p><a href="https://www.xiachufang.com/recipe/1065180/" target="_blank" rel="noopener">https://www.xiachufang.com/recipe/1065180/</a></p>
<p>DIY空间很大～自己加了玉米粒，只蒸了一次米饭，依然超！级！香！</p>
<h2 id="咖喱焗饭"><a href="#咖喱焗饭" class="headerlink" title="咖喱焗饭"></a>咖喱焗饭</h2><p><img src="/images/life/%E5%92%96%E5%96%B1%E7%84%97%E9%A5%AD.jpeg" alt="咖喱焗饭"><br>先蒸好菜饭，加点水拌入咖喱，最后把略微煎了下的培根虾仁和饭混匀，上面撒一层芝士就可以放进烤箱了。<br>发挥空间很大，其实直接咖喱饭或者芝士焗饭就挺好吃吧。</p>
<h1 id="好多肉啊"><a href="#好多肉啊" class="headerlink" title="好多肉啊"></a>好多肉啊</h1><h2 id="椒盐排骨"><a href="#椒盐排骨" class="headerlink" title="椒盐排骨"></a>椒盐排骨</h2><p><img src="/images/life/%E6%A4%92%E7%9B%90%E6%8E%92%E9%AA%A8.jpg" alt="L%QA38JpTP66BfX9Jl6H%g_thumb_5fe5"></p>
<h2 id="蜜汁鸡翅-amp-鸡腿"><a href="#蜜汁鸡翅-amp-鸡腿" class="headerlink" title="蜜汁鸡翅&amp;鸡腿"></a>蜜汁鸡翅&amp;鸡腿</h2><p><img src="/images/life/%E8%9C%9C%E6%B1%81%E9%B8%A1%E7%BF%85.jpg" alt="9wo%YPQ0S7+rHBQ0JglSSQ_thumb_5f17"></p>
<h2 id="肉末豆腐"><a href="#肉末豆腐" class="headerlink" title="肉末豆腐"></a>肉末豆腐</h2><p><img src="/images/life/%E8%82%89%E6%9C%AB%E8%B1%86%E8%85%90.jpg" alt="9yb%6dTXRIyAeSiTBseVjA_thumb_5fcb"></p>
<h2 id="牛肉丸子汤"><a href="#牛肉丸子汤" class="headerlink" title="牛肉丸子汤"></a>牛肉丸子汤</h2><p><img src="/images/life/%E7%89%9B%E8%82%89%E4%B8%B8%E5%AD%90%E6%B1%A4.jpg" alt="UNADJUSTEDNONRAW_thumb_5fcf"></p>
<h2 id="盐焗鸡"><a href="#盐焗鸡" class="headerlink" title="盐焗鸡"></a>盐焗鸡</h2><p><img src="/images/life/%E7%9B%90%E7%84%97%E9%B8%A1.jpeg" alt="盐焗鸡"><br>直接用的盐焗粉，葱姜片垫底，抹好直接放电饭煲蒸半小时就好啦。<br>事先腌一下应该更入味。</p>
<h2 id="椰子鸡"><a href="#椰子鸡" class="headerlink" title="椰子鸡"></a>椰子鸡</h2><p><img src="/images/life/%E6%A4%B0%E5%AD%90%E9%B8%A1.jpeg" alt="椰子鸡"><br>主要参考的曼食慢语的菜谱：<a href="https://www.xiachufang.com/recipe/103465588/" target="_blank" rel="noopener">https://www.xiachufang.com/recipe/103465588/</a><br>跟着广东室友做的。用了一只老椰🥥的椰水，椰肉用了一半。鸡用的是一整只小母鸡，只用煮十分钟，非常嫩！</p>
<h2 id="脆皮烤鸡"><a href="#脆皮烤鸡" class="headerlink" title="脆皮烤鸡"></a>脆皮烤鸡</h2><p><img src="/images/life/%E8%84%86%E7%9A%AE%E7%83%A4%E9%B8%A1.jpeg" alt="脆皮烤鸡"><br>这算是看了那么多菜单过后自己总结出来的。</p>
<ol>
<li>椒盐按摩鸡身，然后用牙签猛插孔（为了腌得更入味），放冰箱里面一晚上。</li>
<li>预热到425度，烤鸡刷少许花椒油放入。</li>
<li>30-40分钟后再刷一层蜂蜜，最后烤5分钟就好啦！</li>
</ol>
<h2 id="蘑菇烧鸡"><a href="#蘑菇烧鸡" class="headerlink" title="蘑菇烧鸡"></a>蘑菇烧鸡</h2><p><img src="/images/life/%E8%98%91%E8%8F%87%E7%83%A7%E9%B8%A1.jpeg" alt="蘑菇烧鸡"><br>最近做了好多鸡诶，这个做法很家常啦。</p>
<h2 id="猪肉丸子汤"><a href="#猪肉丸子汤" class="headerlink" title="猪肉丸子汤"></a>猪肉丸子汤</h2><p><img src="/images/life/%E7%8C%AA%E8%82%89%E4%B8%B8%E5%AD%90%E6%B1%A4.jpeg" alt="猪肉丸子汤"><br>丸子还是猪肉香呀（潮汕牛肉丸除外）</p>
<h1 id="花式素菜"><a href="#花式素菜" class="headerlink" title="花式素菜"></a>花式素菜</h1><h2 id="酱汁杏鲍菇"><a href="#酱汁杏鲍菇" class="headerlink" title="酱汁杏鲍菇"></a>酱汁杏鲍菇</h2><p><img src="/images/life/%E9%85%B1%E6%B1%81%E6%9D%8F%E9%B2%8D%E8%8F%87.jpeg" alt="酱汁杏鲍菇"><br>下厨房链接：<a href="https://www.xiachufang.com/recipe/104527015/" target="_blank" rel="noopener">https://www.xiachufang.com/recipe/104527015/</a><br>先煎后焖，比肉还好吃的杏鲍菇！</p>
<h2 id="酿豆腐"><a href="#酿豆腐" class="headerlink" title="酿豆腐"></a>酿豆腐</h2><p><img src="/images/life/%E9%85%BF%E8%B1%86%E8%85%90.jpeg" alt="酿豆腐"><br>下厨房链接：<a href="https://www.xiachufang.com/recipe/100054342/" target="_blank" rel="noopener">https://www.xiachufang.com/recipe/100054342/</a><br>没有吃过正宗的，感觉自己做的味道还不错，就是焖的时间有点短了。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>food</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 1007 - Minimum Domino Rotations For Equal Row (Greedy)</title>
    <url>/2020/03/20/leetcode-1007/</url>
    <content><![CDATA[<p>Space Complexity: O(1), Time Complexity: O(N).</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDominoRotations</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Fix A[0] and check A/B</span></span><br><span class="line">    <span class="keyword">int</span> res1 = checkElement(A[<span class="number">0</span>], A, B);</span><br><span class="line">    <span class="comment">// Fix B[0] and check A/B</span></span><br><span class="line">    <span class="keyword">int</span> res2 = checkElement(B[<span class="number">0</span>], A, B);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res = Math.min(res1, res2);</span><br><span class="line">    <span class="keyword">if</span> (res == Integer.MAX_VALUE) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">checkElement</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rotateA = <span class="number">0</span>, rotateB = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] != x &amp;&amp; B[i] != x) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (A[i] != x) &#123;</span><br><span class="line">            rotateA++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (B[i] != x) &#123;</span><br><span class="line">            rotateB++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.min(rotateA, rotateB);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Greedy</tag>
        <tag>Array</tag>
        <tag>Google - Java - Pending</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Operations</title>
    <url>/2020/04/05/hexo-basic/</url>
    <content><![CDATA[<h3 id="Basic-workflow-基本操作"><a href="#Basic-workflow-基本操作" class="headerlink" title="Basic workflow 基本操作"></a>Basic workflow 基本操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>



<h3 id="New-page-post-draft-新建内容"><a href="#New-page-post-draft-新建内容" class="headerlink" title="New page/post/draft 新建内容"></a>New page/post/draft 新建内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page page-name</span><br><span class="line">hexo new draft draft-name</span><br><span class="line">hexo new post post-name</span><br><span class="line">hexo publish draft draft-name.md</span><br></pre></td></tr></table></figure>



<h3 id="Show-abstract-on-Home-page-首页显示摘要"><a href="#Show-abstract-on-Home-page-首页显示摘要" class="headerlink" title="Show abstract on Home page 首页显示摘要"></a>Show abstract on Home page 首页显示摘要</h3><p>use <a id="more"></a> to separate abstract and the context.</p>
<p>For example,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Basic Configuration For A New Ubuntu Server</span><br><span class="line">date: 2020-04-03 13:09:10</span><br><span class="line">---</span><br><span class="line">This is abstract.</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">More details.</span><br></pre></td></tr></table></figure>



<h3 id="Sticky-posts-置顶"><a href="#Sticky-posts-置顶" class="headerlink" title="Sticky posts 置顶"></a>Sticky posts 置顶</h3><ol>
<li>Install related repositories</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>Add <code>top: true</code> to <code>Front-matter</code>. </p>
<p>Example:</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: post</span><br><span class="line">title: 懒人做法实践之路</span><br><span class="line">date: 2020-03-17 17:04:34</span><br><span class="line">tags: food</span><br><span class="line">categories: life</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<p>Optional:</p>
<ol start="3">
<li>Show “Sticky”</li>
</ol>
<p>Open <code>post.swig</code> in <code>/blog/themes/next/layout/_macro</code>, add the following code below <code>&lt;div class=&quot;post-meta&quot;&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class&#x3D;&quot;fa fa-thumb-tack&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;font color&#x3D;7D26CD&gt;Sticky&lt;&#x2F;font&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>Reference: </p>
<p>Hexo博客彻底解决置顶问题 <a href="http://wangwlj.com/2018/01/09/blog_pin_post/" target="_blank" rel="noopener">http://wangwlj.com/2018/01/09/blog_pin_post/</a></p>
<h3 id="Loacal-Search添加搜索功能"><a href="#Loacal-Search添加搜索功能" class="headerlink" title="Loacal Search添加搜索功能"></a>Loacal Search添加搜索功能</h3><ol>
<li>Install</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Global configuration in  <code>blog/_config.yml</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Next configuration in <code>blog/themes/next/_config.yml</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<p>Redeploy.</p>
<p>Reference: <a href="https://yashuning.github.io/2018/06/29/hexo-Next-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">https://yashuning.github.io/2018/06/29/hexo-Next-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</a></p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>tech</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 1048 - Longest String Chain (Graph)</title>
    <url>/2020/03/21/leetcode-1048/</url>
    <content><![CDATA[<h2 id="Approach-1-Graph"><a href="#Approach-1-Graph" class="headerlink" title="Approach 1 - Graph"></a>Approach 1 - Graph</h2><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>Runtime: 38 ms, faster than 41.66% of Java online submissions for Longest String Chain.<br>Memory Usage: 42 MB, less than 100.00% of Java online submissions for Longest String Chain.</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Space Complexity: O(N^2), Time Complexity: O(M*N).</p>
<p>M: length of words, N: number of words.</p>
<a id="more"></a>


<h3 id="Java-Code"><a href="#Java-Code" class="headerlink" title="Java Code"></a>Java Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestStrChain</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, List&lt;String&gt;&gt; graphMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    Map&lt;String, Integer&gt; indegreeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// add all string as predecessors: O(n)</span></span><br><span class="line">    <span class="keyword">for</span> (String s : words) &#123;</span><br><span class="line">        graphMap.put(s, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        indegreeMap.put(s, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// build graph: O(n*word_length)</span></span><br><span class="line">    <span class="keyword">for</span> (String s : words) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// traverse predecessors</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            String cur = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == s.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                cur = s.substring(<span class="number">0</span>, s.length() - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = s.substring(<span class="number">0</span>, i) + s.substring(i+<span class="number">1</span>, s.length());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (graphMap.containsKey(cur)) &#123;</span><br><span class="line">                graphMap.get(cur).add(s);</span><br><span class="line">                indegreeMap.put(s, indegreeMap.get(s) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// collect "start" words</span></span><br><span class="line">    <span class="keyword">for</span> (String s : indegreeMap.keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (indegreeMap.get(s) == <span class="number">0</span>) &#123;</span><br><span class="line">            queue.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// BFS: O(depth) -&gt; O(logn)</span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        res++;</span><br><span class="line">        <span class="keyword">int</span> count = queue.size();</span><br><span class="line">        <span class="keyword">while</span> (count-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            String s = queue.poll();</span><br><span class="line">            queue.addAll(graphMap.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Approach-2-Dynamic-Progrmming"><a href="#Approach-2-Dynamic-Progrmming" class="headerlink" title="Approach 2 - Dynamic Progrmming"></a>Approach 2 - Dynamic Progrmming</h2><p>To be continued.</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Graph</tag>
        <tag>Google</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 221 - Maximal Square (Dynamic Programming)</title>
    <url>/2020/03/22/leetcode-221/</url>
    <content><![CDATA[<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>Runtime: 4 ms, faster than 84.73% of Java online submissions for Maximal Square.</p>
<p>Memory Usage: 43.4 MB, less than 91.18% of Java online submissions for Maximal Square.</p>
<a id="more"></a>


<h3 id="Approach-1-Dynamic-Programming"><a href="#Approach-1-Dynamic-Programming" class="headerlink" title="Approach 1 - Dynamic Programming"></a>Approach 1 - Dynamic Programming</h3><p>Space Complexity: O(MN), Time Complexity: O(MN).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[matrix.length][matrix[<span class="number">0</span>].length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="string">'0'</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j], Math.min(dp[i-<span class="number">1</span>][j-<span class="number">1</span>], dp[i][j-<span class="number">1</span>])) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result = Math.max(result, dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result * result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Approach-2-Better-Dynamic-Progrmming"><a href="#Approach-2-Better-Dynamic-Progrmming" class="headerlink" title="Approach 2 - Better Dynamic Progrmming"></a>Approach 2 - Better Dynamic Progrmming</h3><p>To be continued.</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Google - Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 222 - Count Complete Tree Nodes (Binary Search)</title>
    <url>/2020/03/28/leetcode-222/</url>
    <content><![CDATA[<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Count Complete Tree Nodes.</p>
<p>Memory Usage: 42.5 MB, less than 9.76% of Java online submissions for Count Complete Tree Nodes.</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Space Complexity: O(depth), either for dfs when computing depth or Stack.</p>
<p>Time Complexity: O(depth^2), and each checkExist costs  O(depth);</p>
<a id="more"></a>


<h3 id="Java-Code"><a href="#Java-Code" class="headerlink" title="Java Code"></a>Java Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> depth = checkDepth(root);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Binary Search</span></span><br><span class="line">        <span class="keyword">int</span> left = (<span class="keyword">int</span>)Math.pow(<span class="number">2</span>, depth - <span class="number">1</span>), right = (<span class="keyword">int</span>)Math.pow(<span class="number">2</span>, depth) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (checkExist(root, mid)) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">checkDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> checkDepth(root.left) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// can also use binary search for checkExist</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkExist</span><span class="params">(TreeNode root, <span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// find parent</span></span><br><span class="line">        Stack&lt;Integer&gt; path = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> tmp = mid;</span><br><span class="line">        <span class="keyword">while</span> (tmp &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            path.add(tmp);</span><br><span class="line">            tmp /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        TreeNode parent = root;</span><br><span class="line">        <span class="keyword">while</span> (path.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(path.pop() % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                parent = parent.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parent = parent.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h3><p> For Saving Space: </p>
<ol>
<li>Use iteration for computing depth</li>
<li>Use binary search for checking existence</li>
</ol>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Google - Java - Pending</tag>
        <tag>Binary Search</tag>
        <tag>Tree</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 373 - Find K Pairs with Smallest Sums</title>
    <url>/2020/04/05/leetcode-373/</url>
    <content><![CDATA[<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>Runtime: 12 ms, faster than 40.95% of Java online submissions for Find K Pairs with Smallest Sums.<br>Memory Usage: 44.8 MB, less than 33.33% of Java online submissions for Find K Pairs with Smallest Sums.</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Space Complexity: O(k), both for result list and priority queue.<br>Time Complexity: O(k*logk), with O(logk) for each insertion to heap.</p>
<a id="more"></a>


<h3 id="Java-Code"><a href="#Java-Code" class="headerlink" title="Java Code"></a>Java Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; kSmallestPairs(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums1 == <span class="keyword">null</span> || nums2 == <span class="keyword">null</span> || nums1.length == <span class="number">0</span> || nums2.length == <span class="number">0</span> || k &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(k, (o1, o2)-&gt;o1[<span class="number">0</span>] + o1[<span class="number">1</span>] - o2[<span class="number">0</span>] - o2[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.min(nums1.length, k); i++) &#123;</span><br><span class="line">            queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nums1[i], nums2[<span class="number">0</span>], <span class="number">0</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; k &amp;&amp; !queue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// poll current pair</span></span><br><span class="line">            <span class="keyword">int</span>[] cur = queue.poll();</span><br><span class="line">            List&lt;Integer&gt; curList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            curList.add(cur[<span class="number">0</span>]);</span><br><span class="line">            curList.add(cur[<span class="number">1</span>]);</span><br><span class="line">            result.add(curList);</span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">// add potential pair</span></span><br><span class="line">            <span class="keyword">int</span> index2 = cur[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (index2 &lt; nums2.length - <span class="number">1</span>) &#123;</span><br><span class="line">                queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;cur[<span class="number">0</span>], nums2[index2 + <span class="number">1</span>], index2 + <span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Heap - LinkedIn - Google - Java - Pending</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 380 - Insert Delete GetRandom O(1)</title>
    <url>/2020/04/03/leetcode-380/</url>
    <content><![CDATA[<p>Using ArrayList + HashMap.</p>
<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>Runtime: 8 ms, faster than 75.66% of Java online submissions for Insert Delete GetRandom O(1).</p>
<p>Memory Usage: 44.3 MB, less than 94.00% of Java online submissions for Insert Delete GetRandom O(1).</p>
<a id="more"></a>

<h3 id="Java-Code"><a href="#Java-Code" class="headerlink" title="Java Code"></a>Java Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; dataList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Integer&gt; indexMap; <span class="comment">// &lt;val, index&gt;</span></span><br><span class="line">    <span class="keyword">private</span> Random rand;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RandomizedSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dataList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        indexMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        rand = <span class="keyword">new</span> Random();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (indexMap.containsKey(val)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dataList.add(val);</span><br><span class="line">        indexMap.put(val, dataList.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (indexMap.containsKey(val)) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = indexMap.get(val);</span><br><span class="line">            <span class="keyword">int</span> last = dataList.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (last &gt; index) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = dataList.get(last);</span><br><span class="line">                dataList.set(index, tmp);</span><br><span class="line">                indexMap.put(tmp, index);</span><br><span class="line">            &#125;</span><br><span class="line">            dataList.remove(last);</span><br><span class="line">            indexMap.remove(val);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get a random element from the set. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = rand.nextInt(dataList.size());</span><br><span class="line">        <span class="keyword">return</span> dataList.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RandomizedSet obj = new RandomizedSet();</span></span><br><span class="line"><span class="comment"> * boolean param_1 = obj.insert(val);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.remove(val);</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.getRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Array</tag>
        <tag>Java</tag>
        <tag>HashMap</tag>
        <tag>LinkedIn</tag>
        <tag>Amazon</tag>
        <tag>Facebook</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 698 - Partition to K Equal Sum Subsets</title>
    <url>/2020/04/05/leetcode-698/</url>
    <content><![CDATA[<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>Runtime: 1 ms, faster than 93.45% of Java online submissions for Partition to K Equal Sum Subsets.<br>Memory Usage: 37.2 MB, less than 9.30% of Java online submissions for Partition to K Equal Sum Subsets.</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Space Complexity: O(N), because of recursion.<br>Time Complexity: O(N), O(k^(N−k) * k!), N is the length of nums, and k is as given. </p>
<a id="more"></a>

<h3 id="Java-Code"><a href="#Java-Code" class="headerlink" title="Java Code"></a>Java Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartitionKSubsets</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span> || k &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % k != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> target = sum / k;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> start = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[start] &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// skip (num == target)</span></span><br><span class="line">        <span class="keyword">while</span> (start &gt;= <span class="number">0</span> &amp;&amp; nums[start] == target) &#123;</span><br><span class="line">            k--;</span><br><span class="line">            start--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// fill in k groups from the end of array</span></span><br><span class="line">        <span class="keyword">return</span> search(<span class="keyword">new</span> <span class="keyword">int</span>[k], nums, start, target);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] groups, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cur = nums[start];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; groups.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (groups[i] + cur &lt;= target) &#123;</span><br><span class="line">                groups[i] += cur;</span><br><span class="line">                <span class="keyword">if</span> (search(groups, nums, start - <span class="number">1</span>, target)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                groups[i] -= cur;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (groups[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Another-Approach-Dynamic-Programming"><a href="#Another-Approach-Dynamic-Programming" class="headerlink" title="Another Approach: Dynamic Programming"></a>Another Approach: Dynamic Programming</h3><p>To be continued.</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Java</tag>
        <tag>LinkedIn</tag>
        <tag>Pending</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 1 - Two Sum (Array &amp; HashMap)</title>
    <url>/2020/03/17/leetcode-TwoSum/</url>
    <content><![CDATA[<h3 id="Approach-1-Array"><a href="#Approach-1-Array" class="headerlink" title="Approach 1: Array"></a>Approach 1: Array</h3><p>Space Complexity: O(1), Time Complexity: O(N^2).</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;i, j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No valid result"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Approach-2-HashMap"><a href="#Approach-2-HashMap" class="headerlink" title="Approach 2: HashMap"></a>Approach 2: HashMap</h3><p>Space Complexity: O(N), Time Complexity: O(N).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> diff = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(diff)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;map.get(diff), i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No valid result."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Array</tag>
        <tag>Google</tag>
        <tag>Java</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode - Backtracking</title>
    <url>/2019/10/14/leetcode-backtracking/</url>
    <content><![CDATA[<p><strong>Problem List</strong><br>46.Permutations<br>47.Permutations II<br>39.Combination Sum<br>40.Combination Sum II</p>
<a id="more"></a>

<h2 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46. Permutations"></a>46. Permutations</h2><p><a href="https://leetcode.com/problems/permutations/" target="_blank" rel="noopener">https://leetcode.com/problems/permutations/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span>[] visited = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        helper(res, nums, <span class="keyword">new</span> ArrayList&lt;&gt;(), visited);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, <span class="keyword">int</span>[] nums, List&lt;Integer&gt; list, <span class="keyword">int</span>[] visited)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list.size() == nums.length) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                list.add(nums[i]);</span><br><span class="line">                visited[i] = <span class="number">1</span>;</span><br><span class="line">                helper(res, nums, list, visited.clone());</span><br><span class="line">                visited[i] = <span class="number">0</span>;</span><br><span class="line">                list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="47-Permutations-II"><a href="#47-Permutations-II" class="headerlink" title="47. Permutations II"></a>47. Permutations II</h2><p><a href="https://leetcode.com/problems/permutations-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/permutations-ii/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span>[] visited = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        helper(res, nums, <span class="keyword">new</span> ArrayList&lt;&gt;(), visited);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, <span class="keyword">int</span>[] nums, List&lt;Integer&gt; list, <span class="keyword">int</span>[] visited)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list.size() == nums.length) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>] &amp;&amp; visited[i-<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>  (visited[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            list.add(nums[i]);</span><br><span class="line">            visited[i] = <span class="number">1</span>;</span><br><span class="line">            helper(res, nums, list, visited.clone());</span><br><span class="line">            visited[i] = <span class="number">0</span>;</span><br><span class="line">            list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="39-Combination-Sum"><a href="#39-Combination-Sum" class="headerlink" title="39. Combination Sum"></a>39. Combination Sum</h2><p><a href="https://leetcode.com/problems/combination-sum/" target="_blank" rel="noopener">https://leetcode.com/problems/combination-sum/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) 	&#123;</span><br><span class="line">        <span class="keyword">if</span> (candidates == <span class="keyword">null</span> || candidates.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        helper(candidates, target, <span class="number">0</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, <span class="keyword">int</span> start, List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target == <span class="number">0</span>) res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            list.add(candidates[i]);</span><br><span class="line">            helper(candidates, target - candidates[i], i, list);</span><br><span class="line">            list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="40-Combination-Sum-II"><a href="#40-Combination-Sum-II" class="headerlink" title="40. Combination Sum II"></a>40. Combination Sum II</h2><p><a href="https://leetcode.com/problems/combination-sum-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/combination-sum-ii/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (candidates == <span class="keyword">null</span> || candidates.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        helper(res, <span class="keyword">new</span> ArrayList&lt;&gt;(), candidates, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list, <span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; candidates.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; start &amp;&amp; candidates[i] == candidates[i-<span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// skip duplicates</span></span><br><span class="line">                list.add(candidates[i]);</span><br><span class="line">                helper(res, list, candidates, target - candidates[i], i + <span class="number">1</span>);</span><br><span class="line">                list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Reading</title>
    <url>/2020/03/16/reading/</url>
    <content><![CDATA[<p><strong>In Progress</strong><br>《目标中国.华盛顿的“屠龙”战略》【美】威廉·恩道尔</p>
<a id="more"></a>

<p><strong>Not Started</strong><br>《夏目友人帐》 村井贞之<br>《清醒思考的艺术》 【德】罗尔夫·多贝里</p>
<p><strong>Completed</strong><br>《Rich Daddy, Poor Daddy》 [US]Robert Kiyosaki, Sharon Lechter<br>《玛格丽特小镇》<br>《岛上书店》 加·泽文<br>《你今天真好看》 【美】利兹·克里莫<br>《解忧杂货店》 东野圭吾<br>《24个比利》 丹尼尔·凯斯<br>《三体》 刘慈欣<br>《黄金时代》 王小波<br>《无声告白》<br>《阿弥陀佛么么哒》 大冰<br>《目送》 龙应台<br>《福尔摩斯探案全集》 Conan Doyle A.</p>
<p><strong>To Be Continued…</strong></p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>Deploy Vue Project to Nginx on Ubuntu 18.04</title>
    <url>/2020/03/16/vue-ubuntu/</url>
    <content><![CDATA[<p>Build and deploy vue.js project to Ubuntu 18.04 (Cloud Instance on Vultr).</p>
<a id="more"></a>

<h2 id="Nginx-on-Ubuntu-18-04"><a href="#Nginx-on-Ubuntu-18-04" class="headerlink" title="Nginx on Ubuntu 18.04"></a>Nginx on Ubuntu 18.04</h2><ol>
<li><p>Install Nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>Check status</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>Test</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;your_server_ip</span><br></pre></td></tr></table></figure>

<p>You should see the default Nginx landing page:</p>
<p><img src="https://assets.digitalocean.com/articles/nginx_1604/default_page.png" alt="Nginx default page"></p>
<p>This page is included with Nginx to show you that the server is running correctly.</p>
</li>
<li><p>mkdir for vue project</p>
<p>mkdir in the default directory of nginx to avoid potential “permission denied” problem.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;www&#x2F;</span><br><span class="line">mkdir vue</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="Build-and-Deploy-VueJS-Project"><a href="#Build-and-Deploy-VueJS-Project" class="headerlink" title="Build and Deploy VueJS Project"></a>Build and Deploy VueJS Project</h2><ol>
<li><p>Build on local machine (or server)</p>
<p>cd into root directory of your vue project</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>“dist” directory should be generated if successfully.</p>
</li>
<li><p>Push “dist” to server</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r &#123;your_local_root_dir&#125;&#x2F;dist root@your_server_ip:&#123;&#x2F;var&#x2F;www&#x2F;vue&#x2F;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Edit configuration file on server</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default</span><br></pre></td></tr></table></figure>

<p>change root to “/var/www/vue/dist”</p>
<p>You can also create new configuration file.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo touch &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;vue_project</span><br><span class="line">sudo ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;vue_project &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;vue_project</span><br><span class="line">sudo vim &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;vue_project</span><br></pre></td></tr></table></figure>
</li>
<li><p>Test and restart nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>visit <a href="http://your_server_ip" target="_blank" rel="noopener">http://your_server_ip</a> again for confirmation.</p>
<p>​</p>
</li>
</ol>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ol>
<li>“No firewall” set on vultr, or adjust it with “ufw”.</li>
<li>Set enough RAM for the server, especially if you want to build the project on server instead of local machine.</li>
</ol>
<h3 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h3><p>Design and CI</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>[<a href="https://www.cyberciti.biz/faq/install-and-configure-nginx-on-ubuntu-linux-18-04-lts/]" target="_blank" rel="noopener">https://www.cyberciti.biz/faq/install-and-configure-nginx-on-ubuntu-linux-18-04-lts/]</a>(Install and Configure Nginx on Ubuntu Linux 18.04 LTS)</p>
<p>[<a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04]" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04]</a>(How To Install Nginx on Ubuntu 18.04)</p>
<p>[<a href="https://thewebtier.com/web/setup-vuejs-app-on-ubuntu-server/]" target="_blank" rel="noopener">https://thewebtier.com/web/setup-vuejs-app-on-ubuntu-server/]</a>(Setup VueJS app on Ubuntu Server)</p>
<p>[<a href="https://medium.com/@thucnc/deploy-a-vuejs-web-app-with-nginx-on-ubuntu-18-04-f93860219030]" target="_blank" rel="noopener">https://medium.com/@thucnc/deploy-a-vuejs-web-app-with-nginx-on-ubuntu-18-04-f93860219030]</a>(Deploy a VueJS web app with nginx on Ubuntu 18.04)</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>tech</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 430 - Flatten a Multilevel Doubly Linked List (DFS)</title>
    <url>/2020/03/23/leetcode-430/</url>
    <content><![CDATA[<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Flatten a Multilevel Doubly Linked List.<br>Memory Usage: 37.9 MB, less than 72.50% of Java online submissions for Flatten a Multilevel Doubly Linked List.</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Space Complexity: O(depth of child), because of recursion,<br>Time Complexity: O(number of nodes).</p>
<a id="more"></a>

<h3 id="Java-Code"><a href="#Java-Code" class="headerlink" title="Java Code"></a>Java Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node prev;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment">    public Node child;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">flatten</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        Node dummy = <span class="keyword">new</span> Node();</span><br><span class="line">        Node tail = dummy;</span><br><span class="line">        dfs(head, tail);</span><br><span class="line">        <span class="keyword">if</span> (dummy.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            dummy.next.prev = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">dfs</span><span class="params">(Node head, Node tail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> tail;</span><br><span class="line">        <span class="comment">// add itself</span></span><br><span class="line">        Node next = head.next;</span><br><span class="line">        tail.next = head;</span><br><span class="line">        head.prev = tail;</span><br><span class="line">        tail = tail.next;</span><br><span class="line">        <span class="comment">// add child list</span></span><br><span class="line">        tail = dfs(head.child, tail);</span><br><span class="line">        head.child = <span class="keyword">null</span>; <span class="comment">// important!</span></span><br><span class="line">        <span class="comment">// add next node</span></span><br><span class="line">        <span class="keyword">return</span> dfs(next, tail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Google</tag>
        <tag>Java</tag>
        <tag>DFS</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 1110 - Delete Nodes And Return Forest (DFS)</title>
    <url>/2020/03/27/leetcode-1110/</url>
    <content><![CDATA[<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>Runtime: 1 ms, faster than 98.12% of Java online submissions for Delete Nodes And Return Forest.<br>Memory Usage: 40.5 MB, less than 100.00% of Java online submissions for Delete Nodes And Return Forest.</p>
<a id="more"></a>

<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>M is the number of deleted elements,  N is the number of nodes.</p>
<p>Space Complexity: O(logN), actually O(min(M, depth))</p>
<ol>
<li>deleteSet - O(M)</li>
<li>Recursion - O(depth of the tree), or O(logN)</li>
</ol>
<p>Time Complexity: O(N).</p>
<ol>
<li>build deleteSet - O(M)</li>
<li>dfs - O(N)</li>
</ol>
<h3 id="Java-Solution"><a href="#Java-Solution" class="headerlink" title="Java Solution"></a>Java Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">delNodes</span><span class="params">(TreeNode root, <span class="keyword">int</span>[] to_delete)</span> </span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; treeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> treeList;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Integer&gt; deleteSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : to_delete) &#123;</span><br><span class="line">            deleteSet.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root, <span class="keyword">null</span>, treeList, deleteSet);</span><br><span class="line">        <span class="keyword">return</span> treeList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, TreeNode prev, List&lt;TreeNode&gt; treeList, Set&lt;Integer&gt; deleteSet)</span> </span>&#123;</span><br><span class="line">        TreeNode leftNode = root.left;</span><br><span class="line">        TreeNode rightNode = root.right;</span><br><span class="line">        <span class="comment">// check myself</span></span><br><span class="line">        <span class="keyword">if</span> (deleteSet.contains(root.val)) &#123;</span><br><span class="line">            <span class="comment">// delete myself from prev</span></span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (prev.left == root) &#123;</span><br><span class="line">                    prev.left = <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    prev.right = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                prev = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">                treeList.add(root);</span><br><span class="line">            &#125;</span><br><span class="line">            prev = root;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// dfs left child</span></span><br><span class="line">        <span class="keyword">if</span> (leftNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            dfs(leftNode, prev, treeList, deleteSet);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// dfs right child</span></span><br><span class="line">        <span class="keyword">if</span> (rightNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            dfs(rightNode, prev, treeList, deleteSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Google</tag>
        <tag>Java</tag>
        <tag>Tree</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 341 - Flatten Nested List Iterator</title>
    <url>/2020/04/06/leetcode-341/</url>
    <content><![CDATA[<h3 id="Appraoch-1-Stack"><a href="#Appraoch-1-Stack" class="headerlink" title="Appraoch 1: Stack"></a>Appraoch 1: Stack</h3><a id="more"></a>

<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>Runtime: 9 ms, faster than 6.91% of Java online submissions for Flatten Nested List Iterator.<br>Memory Usage: 43.8 MB, less than 5.00% of Java online submissions for Flatten Nested List Iterator.</p>
<h3 id="Java-Code"><a href="#Java-Code" class="headerlink" title="Java Code"></a>Java Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // This is the interface that allows for creating nested lists.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * public interface NestedInteger &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> true if this NestedInteger holds a single integer, rather than a nested list.</span></span><br><span class="line"><span class="comment"> *     public boolean isInteger();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> the single integer that this NestedInteger holds, if it holds a single integer</span></span><br><span class="line"><span class="comment"> *     // Return null if this NestedInteger holds a nested list</span></span><br><span class="line"><span class="comment"> *     public Integer getInteger();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> the nested list that this NestedInteger holds, if it holds a nested list</span></span><br><span class="line"><span class="comment"> *     // Return null if this NestedInteger holds a single integer</span></span><br><span class="line"><span class="comment"> *     public List&lt;NestedInteger&gt; getList();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Stack&lt;NestedInteger&gt; stack;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NestedIterator</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nestedList.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            stack.push(nestedList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop().getInteger();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        updateStack();</span><br><span class="line">        <span class="keyword">return</span> !stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; !stack.peek().isInteger()) &#123;</span><br><span class="line">            List&lt;NestedInteger&gt; nestedList = stack.pop().getList();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = nestedList.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                stack.push(nestedList.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NestedIterator object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NestedIterator i = new NestedIterator(nestedList);</span></span><br><span class="line"><span class="comment"> * while (i.hasNext()) v[f()] = i.next();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h3 id="To-do"><a href="#To-do" class="headerlink" title="To do"></a>To do</h3><ol>
<li>Optimize Stack</li>
<li>Complexity analysis</li>
</ol>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Stack - LinkedIn - Apple - Java - Pending</tag>
      </tags>
  </entry>
</search>
